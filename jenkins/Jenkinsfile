pipeline {
    agent any

    stages {
        stage('Build') {
            steps {
                echo 'Building..'
                sh 'npm install'
                sh 'npm run build-ubuntu'
            }
        }
        stage('Test') {
            steps {
                echo 'Testing..'
                sh 'cp .env.example .env'
                sh '''sed -i "s/{PORT}/3001/g" .env'''
                sh '''sed -i "s/{ENVIRONMENT}/testing/g" .env'''
                sh '''sed -i "s/{CORS}/true/g" .env'''
                sh '''sed -i "s/{LOG_LEVEL}/error/g" .env'''
                sh '''sed -i "s/{LOGS}/logs.log/g" .env'''
                sh '''sed -i "s/{MONGO_USERNAME}/$STG_MONGO_USER/g" .env'''
                sh '''sed -i "s/{MONGO_PASSWORD}/$STG_MONGO_PASSWORD/g" .env'''
                sh '''sed -i "s/{MONGO_IP}/$STG_DB_HOST_IP/g" .env'''
                sh '''sed -i "s/{MONGO_PORT}/$STG_MONGO_PORT/g" .env'''
                sh '''sed -i "s/{MONGO_DB_NAME}/$STG_MONGO_DB_NAME/g" .env'''
                sh '''sed -i "s/{CASSANDRA_USERNAME}/$STG_CASSANDRA_USER/g" .env'''
                sh '''sed -i "s/{CASSANDRA_PASSWORD}/$STG_CASSANDRA_PASSWORD/g" .env'''
                sh '''sed -i "s/{CASSANDRA_IP}/$STG_CASSANDRA_IP/g" .env'''
                sh '''sed -i "s/{CASSANDRA_PORT}/$STG_CASSANDRA_PORT/g" .env'''
                sh '''sed -i "s/{CASSANDRA_KEYSPACE}/$STG_CASSANDRA_KEYSPACE/g" .env'''
                sh '''sed -i "s/{SMTP_SERVER}/$STG_SMTP_SERVER/g" .env'''
                sh '''sed -i "s/{EMAIL}/$STG_EMAIL/g" .env'''
                sh '''sed -i "s/{EMAIL_PASSWORD}/$STG_EMAIL_PASSWORD/g" .env'''
                sh '''sed -i "s/{CQRS_HOST}/$STG_CQRS_HOST/g" .env'''
                sh '''sed -i "s/{CQRS_ENABLE}/$CQRS_ENABLE/g" .env'''
                sh '''sed -i "s/{CQRS_NUMBER_WORKERS}/$CQRS_NUMBER_WORKERS/g" .env'''
                sh 'NODE_ENV=test'
                sh 'npm test'
                sh 'npm run coverage'

                 //publish unit test html
                publishHTML target: [
                        allowMissing: false,
                        alwaysLinkToLastBuild: false,
                        keepAll: true,
                        reportDir: './',
                        reportFiles: 'report.html',
                        reportName: "Unit Test Reports"
                    ]

                //publish coverage html
                publishHTML target: [
                        allowMissing: false,
                        alwaysLinkToLastBuild: false,
                        keepAll: true,
                        reportDir: 'coverage/',
                        reportFiles: 'index.html',
                        reportName: "Coverage Test Reports"
                    ]            
                }
            
        }
        stage('Package') {
            steps {
              echo 'Package..'
              sh "cp package.json build/"
              sh "cp README.md build/"
              sh "cp .service.info build/"
              sh 'export VERSION=$(cat package.json | jq -r .version)'
              sh 'sed -i "s/{BuildVersion}/$VERSION/g" build/.service.info'
              sh 'cp .env build/'
              sh 'tar -czf ixplora.tar.gz build/'
              archiveArtifacts 'ixplora.tar.gz'

            }
        }
        stage('Deploy') {
            steps {
                echo 'Deploying....'
            }
        }
    }
}
